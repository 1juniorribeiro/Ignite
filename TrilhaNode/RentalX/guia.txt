construção de uma aplicação para o aluguel de carros

1º passo criar a pasta de rotas para começar a criação da API, ela disse q vamos primeiro criar as categorias do carro
para cada recurso temos uma rota

2º criar o model para servir de modelo de dados com a tipagem

3º criar o repositorios que servem para fazer a manipulação de dados, faz o acesso ao banco de dados e manipulação de dados

aparentemente o mapa de fluxo da aplicação até agora é

o server recebe e filtra a requisiçção atraves do nome da rota e envia a requisição para suas respectivas rotas
a rota recebe os dados, verifica o metodo http e executa o recebido, se foi post ou get
dentro do metodo escolhido, o metodo chama o repositorio para que manipule os dados, seja para buscar e mostrar ou
para criar os dados, o repositorio usa o model como base e parametro para validar os  dados e serem armazenados na tipagem correta

resumindo
server <---> rotas <---> repositorios <---> model

Agora vamos falar de SOLID para seguir com a aplicação
Precisamos de codigo limpo com nomes declarativos

S -> SRP - Single Responsability Principle(Principio da Responsabilidade Única)
O -> OCP - Open-Closed Principle(Principio aberto/fechado)
L -> LSP - Liskov Substituition Principle( Principio da substuição de liskov)
I -> ISP - Interface Segregation Principle( Principio da Segregação de interface)
D -> DIP - Dependency Inversion Principle( Principio da inversão de Dependencia)

vamos começar a aplicar o principio de responsabilidade unica agora

dica, for usar o implements através do interface do repositorio de categorias usar o atalho Ctrl + . para implementar de forma rapida e automatica

Com a implementação de 2 principios do SOLID mudamos um pouco o fluxo da aplicação

server <---> Rotas <---> Service <---> Interface do Repositório <---> Repositório <---> Model

A interface do repositório é definida para que nosso  repositorios possam ser substituidos de forma facil, agora se
mudarmoso repositorio não alteramos em nada o service, pq o service vai de encontro com a interface e a interface faz
a manipulaçãocom quem está implementando ela, usando o implements, e a interface e o repositorio usam o model como
modelo padrão de dados a serem trabalhados, esse é principio de substituição de liskov
Tamném usamos o Single responsability para definirmos uma responsabilidade para cada modulo, a rota encaminha para o
service que mostra para o repositorio o que é feito com os dados e o repositorio manipula os dados
também foi usado algo de inversão de dependencia, mas a frente quando eu entender melhor comento aqui
