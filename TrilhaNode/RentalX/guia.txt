construção de uma aplicação para o aluguel de carros

1º passo criar a pasta de rotas para começar a criação da API, ela disse q vamos primeiro criar as categorias do carro
para cada recurso temos uma rota

2º criar o model para servir de modelo de dados com a tipagem

3º criar o repositorios que servem para fazer a manipulação de dados, faz o acesso ao banco de dados e manipulação de dados

aparentemente o mapa de fluxo da aplicação até agora é

o server recebe e filtra a requisiçção atraves do nome da rota e envia a requisição para suas respectivas rotas
a rota recebe os dados, verifica o metodo http e executa o recebido, se foi post ou get
dentro do metodo escolhido, o metodo chama o repositorio para que manipule os dados, seja para buscar e mostrar ou
para criar os dados, o repositorio usa o model como base e parametro para validar os  dados e serem armazenados na tipagem correta

resumindo
server <---> rotas <---> repositorios <---> model

Agora vamos falar de SOLID para seguir com a aplicação
Precisamos de codigo limpo com nomes declarativos

S -> SRP - Single Responsability Principle(Principio da Responsabilidade Única)
O -> OCP - Open-Closed Principle(Principio aberto/fechado)
L -> LSP - Liskov Substituition Principle( Principio da substuição de liskov)
I -> ISP - Interface Segregation Principle( Principio da Segregação de interface)
D -> DIP - Dependency Inversion Principle( Principio da inversão de Dependencia)

vamos começar a aplicar o principio de responsabilidade unica agora

dica, for usar o implements através do interface do repositorio de categorias usar o atalho Ctrl + . para implementar de forma rapida e automatica

Com a implementação de 2 principios do SOLID mudamos um pouco o fluxo da aplicação

server <---> Rotas <---> Service <---> Interface do Repositório <---> Repositório <---> Model

A interface do repositório é definida para que nosso  repositorios possam ser substituidos de forma facil, agora se
mudarmoso repositorio não alteramos em nada o service, pq o service vai de encontro com a interface e a interface faz
a manipulaçãocom quem está implementando ela, usando o implements, e a interface e o repositorio usam o model como
modelo padrão de dados a serem trabalhados, esse é principio de substituição de liskov
Tamném usamos o Single responsability para definirmos uma responsabilidade para cada modulo, a rota encaminha para o
service que mostra para o repositorio o que é feito com os dados e o repositorio manipula os dados
também foi usado algo de inversão de dependencia, mas a frente quando eu entender melhor comento aqui

basicamente essas mudanças dizem respeito a aplicação conhecer sempre a abstração e não a implementação da manipulação dos dados


---------------- continuar agora cadastrando a especifição pq ela é independente e não depende de nenhum modulo
ao implementar uma nova informação uma nova tabela começamos com o model para definir o que ela vai ter

agora vamos separar a aplicação em modulos, separar em pequenos blocos da aplicação

criação dos use cases que são as operações que o usuario faz

agora vamos aprender o Singleton Pattern
criar apenas uma instancia de uma classe que vai ser uma instancia global para a aplicação
verificar se realmente a classe precisa ser uma singleton ou precisa ser instanciada mais de uma vez

após separarmos a aplicação em módulos e em casos de uso ao invés de services, a aplicação fica com o novo fluxo

Server - que usa o express para ouvir as rotas pelo router do arquivo index das rotas que organiza as rotas, e usa o json e conecta ao express
   |
Rotas - que conecta o link da rota ao controller que controla as requisições e respostas
   |
  UseCases(pasta que separa os casos de usos da aplicação) - que são divididos em use case e controller do caso de uso
      |
  Controller - recebe a requisição e da a resposta para as rotas atraves da função handle, essa função chama o useCase e retorna a resposta necessaria
      |
  UseCase - o use case passa os dados da requisição e escolhe que metodos do repositorio vão ser utilizados para dar a resposta e executar a manipulação dos dados
      |
  Repositories - que fazem a manipulação dos dados, onde tem todos os nossos metodos, vale lembrar que nosso repositorio é o criado com interfaze as nossas funções que nós criamos são apenas implementações da interface de repositorio que criamos, e essa implementação muda facilmente, a interface só se alterarem os dados
      |
  Model - que diz que dados e que tipo de dados serão aceitos

agora vamos aprender a trabalhar com upload de arquivos com o multer
vamos usar stream no node, o conceito de stream é que o strem permite com que a gente leio o arquivo por partes/pedaços

 agora aprendemos a utilizar o multer, fs e csv parse para lermos uma tabela e armazenarmos as informações de modo separado no array se
 fizemos o armazenamento de dados baseado em um arquivo csv

 segue o fluxo,

 arquivo pelo multipart partform <--> multer <--> fs <--> csvparse <--> criamos o arquivo no banco

agora vemos a parte de documentação, precisamos adicionar o pacote swagger-ui-express
colocamos no tsconfig   "resolveJsonModule": true
importamos o swagger no server e colocamos o app para usar ele com um  rota para visualizar a documentação
criamos dentro da src um arquivo swagger.json para colocarmos as informações, vou precisar estudar mais e praticar com essa ferramenta
